syntax = "proto2";

package qydra;

message Group {
	required bytes uid = 1;
	required uint64 epoch = 2;
	required bytes seed = 3;

	required bytes conf_trans_hash = 4;
	required bytes interim_trans_hash = 5;

	required Roster roster = 6;

	repeated PendingUpdateEntry pending_updates = 7;
	repeated PendingCommitEntry pending_commits = 8;

	required bytes user_id = 9;
	required bytes ilum_dk = 10;
	required bytes x448_dk = 11;
	required bytes ssk = 12;
	required HpkSignPrivateKey identity = 13;

	required EpochSecrets secrets = 14;
	required bytes description = 15;
}

message ChainTree {
	map<uint32, Chain> chains = 1;
	required SecretTree secret_tree = 2;
	required uint32 max_keys_to_skip = 3;
}

message Chain {
	map<uint32, bytes> skipped_keys = 1;
	required bytes next_key = 2;
	required uint32 next_idx = 3;
	required uint32 max_keys_to_skip = 4;
}

message SecretTree {
	required uint32 group_size = 1;
	required uint32 root = 2;
	map<uint32, bytes> secrets = 3;
}

message EpochSecrets {
	required bytes init = 1;
	required bytes mac = 2;
	required ChainTree hs = 3;
	required ChainTree app = 4;
}

message PendingCommit {
	// the new state
	required Group state = 2;
	// ids of framed proposals to ensure no proposals have been received since the commit was sent to the backend
	repeated bytes proposals = 3;
}

// wraps PendingCommit to support bytes keys for map
message PendingCommitEntry {
	required bytes id = 1;
	required PendingCommit commit = 2;
}

message PendingUpdate {
	required bytes ilum_dk = 2;
	required bytes x448_dk = 3;
	required bytes ssk = 4;
}

// wraps PendingUpdate to support bytes keys for map
message PendingUpdateEntry {
	required bytes id = 1;
	required PendingUpdate upd = 2;
}

message HpkSignPrivateKey {
	required bytes ed25519 = 1;
	required bytes dilithium = 2;
}

message HpkSignature {
	required bytes ed25519 = 1;
	required bytes dilithium = 2;
}

// corresponds to key_package::PublicKey
message KeyPackage {
	required bytes ilum_ek = 1;
	required bytes x448_ek = 2;
	required bytes svk = 3;
	required bytes sig = 4;
}

message Member {
	required bytes id = 1;
	required KeyPackage kp = 2;
	required uint64 joined_at_epoch = 3;
}

message Roster {
	repeated Member members = 1;
}

message GroupInfo {
	required bytes guid = 1;
	required uint64 epoch = 2;
	required Roster roster = 3;
	required bytes conf_trans_hash = 4;
	required bytes conf_tag = 5;
	required bytes inviter = 6;
	required bytes joiner = 7;
	required bytes description = 8;
}

message Prop {
	message Remove {
		required bytes id = 1;
	}

	message Update {
		required KeyPackage kp = 1;
	}

	message Add {
		required bytes id = 1;
		required KeyPackage kp = 2;
	}

	message Edit {
		required bytes description = 1;
	}

	oneof variant {
		// option (validate.required) = true;
		Remove remove = 1;
		Update update = 2;
		Add add = 3;
		Edit edit = 4;
	}
}

message FramedProposal {
	required bytes guid = 1;
	required uint64 epoch = 2;
	required bytes sender = 3;
	required Prop prop = 4;
	required bytes sig = 5;
	required bytes mac = 6;
	required bytes nonce = 7;
}

message CmpdCti {
	// encrypted payload
	required bytes ct = 1;
	// encrypted x448 key used to encrypt the payload
	required bytes encrypted_eph_key = 2;
	// iv used to encrypt the x448 key
	required bytes iv = 3;
	// ilum key-independent ct used to encrypt the x448 key (should be combined with its corresponding ctd part to decrypt)
	required bytes ilum_cti = 4;
}

message CmpdCtd {
	required bytes ilum_ctd = 1;
	required bytes ecc_ctd = 2;
}

message Commit {
	required KeyPackage kp = 1;
	required CmpdCti cti = 2;
	repeated bytes prop_ids = 3;
}

message FramedCommit {
	required bytes guid = 1;
	required uint64 epoch = 2;
	required bytes sender = 3;
	required Commit commit = 4;
	required bytes sig = 5;
	required bytes conf_tag = 6;
}

message CommitCtd {
	required bytes user_id = 1;
	// nil for evictees
	optional CmpdCtd ctd = 2;
}

message Ciphertext {
	required bytes content_id = 1;
	required bytes payload = 2;
	required bytes guid = 3;
	required uint64 epoch = 4;
	required uint32 gen = 5;
	required bytes iv = 6;
	required bytes sig = 7;
	required bytes mac = 8;
	required bytes reuse_grd = 9;
}

message WlcmCti {
	required CmpdCti cti = 1;
	required bytes roster_sig = 2;
	required HpkSignature identity_sig = 3;
}

message WlcmCtd {
	required bytes user_id = 1;
	required bytes kp_id = 2;
	required CmpdCtd ctd = 3;
}

message SendCommit {
	// for the backend to fanout this:
	// ctds.for_each(|ctd| {
	//	send_to(ctd.user_id, ReceivedCommit { cti, ctd.ctd })
	// })
	required Ciphertext cti = 1;
	repeated CommitCtd ctds = 2;
}

// combines a set of proposals into one
message SendProposal {
	// each proposal is sent to each of the recipients below
	repeated Ciphertext props = 1;
	repeated bytes recipients = 2;
}

message SendMsg {
	required Ciphertext payload = 1;
	repeated bytes recipients = 2;
}

message SendLeave {
	// something needs to be sent to verify this leave, eg an optional farewell message or a ts?
	// this could be a sub message of SendMsg instead, but it's better to keep things separated
	required SendMsg farewell = 1;
}

message SendAdmit {
	// sent to each newly invited user by the inviter once the commit is accepted and processed; until then,
	// invitees MUST process all messages, but not send anything and not anyhow react; ideally the group should be hidden
	required SendMsg greeting = 1;
}

message SendAdd {
	// commit & each prop are sent to commit.ctds.user_id as ReceivedAdd { ReceivedProposal { props }, ReceivedCommit { commit.cti, commit.ctds[user_id] } }
	repeated Ciphertext props = 1;
	required SendCommit commit = 2;
}

message SendEdit {
	// props may contain pending removes
	repeated Ciphertext props = 1;
	required SendCommit commit = 2;
}

message SendInvite {
	// in a group of a and b, where c and d are invited, it is important to keep the total order for everyone the same:
	// a and b get ReceivedAdd (ra) first and THEN other messages if any sent, while c and d – ReceivedWelcome (rw) and THEN other messages
	// a	b	 c	d
	// ra	ra rw	rw
	// m1	m1 m1	m1
	// m2	m2 m2	m2
	// ...........
	// mn mn mn	mn
	
	// for the backend to fanout this:
	// wctds.for_each(|ctd| {
	//	send_to(ctd.user_id, Received { ReceivedWlcm { wcti, ctd.ctd, ctd.kp_id } })
	// })
	// welcome cti
	required WlcmCti wcti = 1;
	// welcome ctds
	repeated WlcmCtd wctds = 2;
	// props & commit sent to the existing peers, if any; nil, if the group has just been created
	optional SendAdd add = 3;
}

message SendRemove {
	// commit & each prop is sent to commit.ctds.user_id
	repeated Ciphertext props = 1;
	required SendCommit commit = 2;
}

message Send {
	oneof variant {
		// a combined (props, commit)
		SendInvite invite = 1;
		// allows invitees to actually use the group (should process all incomings, but be hidden until then)
		SendAdmit admit = 2;
		// a combined (props, commit)
		SendRemove remove = 3;
		// policy update, name/description change – anything
		SendEdit edit = 4;
		// usually just update proposals, but can be more generic
		SendProposal props = 5; 
		// update commit, but can be more generic
		SendCommit commit = 6; 
		// a request to leave the group
		SendLeave leave = 7;
		// an arbitrary app message
		SendMsg msg = 8;
	}
}

message ReceivedWelcome {
	required WlcmCti cti = 1;
	required CmpdCtd ctd = 2;
	required bytes kp_id = 3;
}

message ReceivedCommit {
	required Ciphertext cti = 1;
	required CmpdCtd ctd = 2; 
}

message ReceivedProposal {
	repeated Ciphertext props = 1;
}

message ReceivedAdd {
	required ReceivedProposal props = 1;
	required ReceivedCommit commit = 2;
}

message ReceivedRemove {
	required ReceivedProposal props = 1;
	// commit cti & ctd
	required Ciphertext cti = 2;
	// nil if evicted
	optional CmpdCtd ctd = 3; 
}

message ReceivedEdit {
	// the proposal itself + optional pending removes from a previous epoch
	required ReceivedProposal props = 1;
	required ReceivedCommit commit = 2;
}

message Received {
	oneof variant {
		ReceivedWelcome wlcm = 1;
		ReceivedAdd add = 2;
		Ciphertext admit = 3;
		ReceivedRemove remove = 4;
		ReceivedEdit edit = 5;
		// update proposals, but can be more generic
		ReceivedProposal props = 6;
		// update commit, but can be more generic
		ReceivedCommit commit = 7;
		// a request to leave, contains a farewell message (Msg)
		Ciphertext leave = 8;
		// an arbitrary app message
		Ciphertext msg = 9;
	}
}

message Msg {
	required bytes payload = 1;
}

// message GroupMeta {
//	creator, name, description, owners, admin, etc
// }